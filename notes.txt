

													🙏 Namaste React 🙏
														
		## Introduction/Inception : 
			
					-- Browser does know about js but not about the react.
					-- we can import react in our project by -- 1. CDN  2. NPM  Physical file
					
			>> CDN : A content delivery network (CDN)
					 is a network of interconnected servers that
					 speeds up webpage loading for data-heavy applications.
					 -- it is where react library is hoisted & we are just pulling react in our project.
					 
			>> CORS : CORS stands for Cross-Origin Resource Sharing,
					   and is a mechanism that allows 
					   resources on a web page to be requested from another domain outside their own domain
			
			>> Cross-Origin : 			
						The crossorigin attribute sets the mode of the request to an HTTP CORS Request.
						A cross-origin request is a request for a resource (e.g. style sheets, iframes, images, fonts, or scripts) from another domain.
  
		>> CDN contains two files :
				1. React : Main core react file
				2. ReactDOM  : DOM file (Bridge between react and browser)
				
				Why two file ??
				 -- React not only works with web it works also with mobile (react native) so thats why two files.
				
				>> react needs a root element to render the stuff. we can create this root element using ReactDOM.
				>> for browser most costly thing is to DOM manipulation. React is having optimised DOM manipulation.
				
					--  const element = React.createElement(tagName,{attributes},child/value)
								-- This API method returns the js object.
								-- child :  -- we can pass another element over here also 
											-- also we can use array to make it siblings.
								
					--  const root = ReactDOM.createRoot(document.getElementById('root')); // It assigns the root inside react 

					-- 	root.render(element);
									-- converts js object to HTML & then put it inside the root 
									-- Take this object & creates the tags which browser understands & put that inside the root element
									
								>>> ReactElement(Object) ==> HTML (Browser Understands) <<<
								
					## It is hard create element using createElement so to get rid of this we have JSX.
					## Root is just get replaced by the element which we have passed inside render.
					## React is library which can work on the small portion of web page also.
					
											--------------------------------------------------------------
											
			2. Igniting our app : 
			
					-- Lots of other libraries,things that are required to make our app fast (production ready).
					
					>> npm : -- Manages packages 
							 -- Repository for all packages 
							 -- npm init
							 
					>> package.json : Configuaration for NPM 
										-- it will manage all the packages that we install in our system
										-- this packages also known as dependancy 
										-- npm will take care of version of that package.
										-- It keeps the 'approx' version
										-- maintains the notes what all dependancies our project needs.
										-- "browserslist" : use to support particular browser
																-- "last 2 Chrome version" -- 100% work on chrome
										
								Bundler : 
											-- Bundler is bundles our app so that we can ship our project to production
											-- minified | cached | compress | clean before sending to the production 
											-- ex.  webpack | parcel 
											
								Two types of dependancies :
								
									1. Dev dependancies
											-- Development phase
											-- npm install -D parcel // I want parcel into my app as a dev dependancy
									2. Normal dependancies
											-- Production phase
											-- React | ReactDOM
											
					# Parcel :
								-- Gives muscles to bones. :)
								-- MINOR : if we have put ^(caret) then parcel will automatically upgrade to new minor version.
												"parcel":"^2.8.3" --> 2.8.4
								-- MAJOR : if we have put ~(tilde) then parcel will automatically upgrade to new MAJOR version.
												"parcel":"~2.8.3" --> 3.0.0
								-- Dev build : Ignite : npx parcel index.html
								-- Prod build : Ignite : npx parcel build index.html // remove "main" from package.json
								-- npm -> install the packages
								-- npx -> executes the packages
								-- it goes to the source (index.html) and build a development build for our app & host that on localhost:1234
								-- HMR : Hot module replacement : On save changes it makes changes in browser automatically.like HOT RELOAD
											-- File watching algorithm
								-- Caching - Faster builds -- So thats why it creates parcel-cache folder
								-- Image Optimization
								-- Minification
								-- Bundling
								-- Compressing
								-- consistant hashing - Keep the track
								-- Code splittting 
								-- differential bundling - To support older browser
								-- Diagnostics
								-- Error handling
								-- HTTPS
								-- Tree shaking algorithm - remove unused code for you.
								-- it generates the dev build for project & host it on 1234 port , when generates build it puts it up in the "dist folder"
										-- it generates three files. HTML CSS JS file in dist folder.
												
					>> package-lock.json :
								-- it keeps the track of 'exact' version that is being install.
								-- it keeps the exact version
								-- integrity : SHA512 hash - keeps a hash to verify whatever version in my machine must be the same version
														which should deploy on production
								-- It is important to maintain package | package-lock on github repository. so that we can regenerate our
									node_modules. so huge size of node_modules no need to push over  the repository.
								
														
					>> node_modules : 
								
								-- node modules contains all the code that we fetch from NPM.
								-- it contains actual data of that dependancies
								## Transitive dependancies : parcel as a project has its own dependancies &
									its dependancies will have its own dependancies	this phenomenon is known as Transitive dependancies
								-- In our project every dependancy has its own package.json & its own dependancies so our project 
										can have lots of package.json.
										
					>> .gitignore : 
								-- if you want some files should not go in production & on github then we can put them inside the 
										gitignore.like node_modules
										
					## CDN links are not the preffered way to bring react in our app 
						why?? --> rather than making request (network call) to the CDN server it will be easy to get things from node_modules
										
					## importing statement in normal js is not supported so to make it supportive we have to add type="module" in script tag
					
				
						----------------------------------------------------------------------------------
						
						
		3. Laying the foundation 
						
							
				-- start/run our project 
						package.json --> scripts --> see the scripts to run project -->
						[ npm run  .....script.... ] or [npm start]
				-- we can customize our own scripts to start our project
				
				## React.createElement() ==> Object ==> ReactDOM ==> HTML ==> Replace Root 
				
				JSX : 
						-- is a js syntax which make it  easy to create react element.
						-- JSX is not a part of react.
						-- we can build React app without JSX.
						-- JSX is not HTML inside javascript it is HTML like syntax
						-- for ex. const jsxHeading = <h1> Namaste React From JSX </h1>; it is a react element.
						-- we have to give className if we want to pass class in tag 
						-- attributes should be in camelCase in jsx.
						-- If we want multiple lines then wrap that inside paranthesis.
						-- if we want to write any js inside JSX  then use {};
						-- JSX takes care about injections (Cross site scripting)
						-- Cross site script : if user tries to execute some malicious things on our machine using input fields
						
						
				Create Element :
				
				# using React :
					const reactHeading = React.createElement('h1',{id:"heading"},"Namaste React From React");
				# using JSX :
					const jsxHeading = <h1> Namaste React From JSX </h1>;
					
					-- this two objects are same.
					-- Js engine only understands ECMAscript, js engine not understand JSX.
					-- so  how this code runs ??
							-- this jsx code is transpiled by the parcel(babel) before goes into the js engine, & then js engine receives the 
								code that browsers can understand.
							-- babel : Transpiling the jsx code to the code which browser(JS engine) can understand.
							
				## JSX =---Babel---=> React.createElement() ==> Object ==> ReactDOM ==> HTML ==> Replace Root 
					
					-- Babel : JSX got convert to React.createElement
					
					
					-------
					
					Component : Everything in react is component.
						
							-- Class based component 
									-- old 
							-- functional based component
									-- new 
									-- Its a normal js function which returns some JSX elements
									-- A js function which returning react element.
									-- Functional component name should be start with capital letter.
									-- How to render component ==> root.render(<Fn_Header2/>); Call function Fn_Header2() inside {};
									-- Component Composition : we can render one component inside another component multiple times also.
									-- const jsxHeading = ()=> (<h1> Namaste React From JSX </h1>);
									
					Element 
							--> const jsxHeading = (<h1> Namaste React From JSX </h1>);
					component
							--> const Heading = ()=> (<h1> Namaste React From JSX </h1>);
							
						we can write jsx element inside component using {} 
						for e.g. {jsxHeading}
						
						
										-----------------------------------------------
										
										
					4. Talk is Cheap :
					
						Props : -- properties are something which we can pass to the component
								-- Dynamically pass some data to component
								-- Just normal argument which we are passing to the function
								-- <RestaurantCard resName="Akshay Food"/>
								-- destructuring : const{resName,cuisine} = props;
								
					## Config Driven UI :
							-- All the UI is driven by the config
							-- for e.g. Corousel is different for Pune | Mumbai 
							
					## Key : Why we need to provide key ??
					
							-- if new comonent cames & if we didn't provide unique id then react re-render all components , it don't know
								on which position should i kept new component
							-- But if we provide unique id then it will only render that newly come component
							-- never use index as a key 
							
						Not using key <<<<< Index <<< Unique Key 